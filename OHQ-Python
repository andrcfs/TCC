#André Felipe Sottolichio
#Código para solução do OH quântico n=4 (todos os métodos).
import math as mt
import matplotlib.pyplot as plt
def norm( lista ):#Função de normalização
    lr=max(lista)-min(lista)
    lista_norm = [i/lr for i in lista]	
    return lista_norm
E=4.5;H=1000;R=6;h=1/H;f1=0+h;f0=0;x=0
k1=[];k2=[];k3=[];k4=[];j=[];n=[];sol=[]
for i in range(-R*H,R*H):#Solução exata
    y=i/H;      sol.append(x)
    x=12*(1-4*y**2+4*y**4/3)*mt.exp(-y**2/2)    
sol_norm = norm(sol)# Normalização 
###  ###   k^2(x)=2*E-y^2   ###   ###
for i in range(-R*H,R*H):# Numerov
    y=i/H;    n.append(f1);    j.append(i/H);
    a=2*(1-5*h*h*(2*E-y*y)/12)*f1;
    b=(1+h*h*(2*E-(y-h)*(y-h))/12)*f0;			
    c=1+h*h*(2*E-(y+h)*(y+h))/12;
    x=(a-b)/c;    f0=f1;    f1=x
n_norm = norm(n)
df0=h;f0=0# Valores iniciais
for i in range(-R*H,R*H):# Euler
    y=i/H;	    k1.append(f0)	
    f=f0+df0*h
    df=df0+(y*y-2*E)*f0*h
    f0=f;    df0=df	
k1_norm = norm(k1)
df0=h;f0=0
for i in range(-R*H,R*H):# Runge-Kutta 2
    y=i/H;	    k2.append(f0)	
    df=df0+((y+h)*(y+h)-2*E)*f0*h/2
    f=f0+df*h
    df=df0+(y*y-2*E)*f0*h
    f0=f;    df0=df	
k2_norm = norm(k2)
df0=h;f0=0
for i in range(-R*H,R*H):# Runge-Kutta 3
    y=i/H;	    k3.append(f0)	
    df=df0+((y+h)*(y+h)-2*E)*f0*h/2
    f=f0+df0*h
    df=df0+((y+h)*(y+h)-2*E)*f*h/2
    f=f0+df*h
    df=df0+(y*y-2*E)*f0*h
    f0=f;    df0=df	   
k3_norm = norm(k3)
f0=0;df0=h	
for i in range(-R*H,R*H):# Runge-Kutta 4 
    y=i/H;    k4.append(f0)	
    #termo de contribuição k1
    a=df0*h
    #termo de contribuição k2 
    df=df0+((y+h/2)*(y+h/2)-2*E)*f0*h					
    b=df*h
    #termo de contribuição k3
    f=f0+b/2
    df=df0+((y+h/2)*(y+h/2)-2*E)*f*h			
    c=df*h	
    #termo de contribuição k4
    f=f0+c					
    df=df0+((y+h)*(y+h)-2*E)*f*h 	
    d=df*h						
    # Passo definitivo
    f=f0+(a/6)+(b/2)+(c/6)+(d/6)
    df=df0+(y*y-2*E)*f0*h
    f0=f;    df0=df						
k4_norm =norm(k4)
fig = plt.figure(1)#Configuração dos gráficos
ax = fig.add_subplot(2, 1, 1)
ax.annotate('$y$', xy=(0.98, 0.45), ha='left', va='top', xycoords='axes fraction', fontsize=10)
ax.annotate('$\psi(y)$', xy=(0.5, 0.97), xytext=(-15,2), ha='left', va='top', xycoords='axes fraction', textcoords='offset points', fontsize=10)
ax.spines['left'].set_position(('data', 0.0))
ax.spines['bottom'].set_position(('data', 0.0))
ax.spines['right'].set_color('none');ax.spines['top'].set_color('none')
ax.autoscale(enable=True, axis='both', tight=None)
plt.subplot(211)#Figura superior
plt.title('Métodos Range-Kutta e Numerov para oscilador quântico (n=4).')
plt.plot(j,k1_norm, label='k1');plt.plot(j,k2_norm, label='k2')
plt.plot(j,k3_norm, label='k3');plt.plot(j,k4_norm, label='k4')
plt.plot(j,n_norm, label='numerov');plt.plot(j,sol_norm, label='solução')
#plt.xlabel('y');plt.ylabel('$\psi(y)$')
plt.axis([-5,6.5,-0.6,0.6])
plt.subplot(223)#Figura inferior esquerda
plt.plot(j,k1_norm, label='k1');plt.plot(j,k2_norm, label='k2')
plt.plot(j,k3_norm, label='k3');plt.plot(j,k4_norm, label='k4')
plt.plot(j,n_norm, label='numerov');plt.plot(j,sol_norm, label='solução')
plt.xlabel('y');plt.ylabel('$\psi(y)$')
plt.axis([5.3,6,-0.001,0.1]);plt.legend()
plt.subplot(224)#Figura inferior direita
plt.plot(j,k1_norm, label='k1');plt.plot(j,k2_norm, label='k2')
plt.plot(j,k3_norm, label='k3');plt.plot(j,k4_norm, label='k4')
plt.plot(j,n_norm, label='numerov');plt.plot(j,sol_norm, label='solução')
plt.xlabel('y');plt.ylabel('$\psi(y)$')
plt.axis([2.38,2.458,0.5465,0.548]);plt.tight_layout()    
plt.show()
