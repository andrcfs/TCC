#André Felipe Sottolichio
#Código para a solução do OH relat. usando as funções à esquerda e direita.
import matplotlib.pyplot as plt# Caso 0s12
def norm( lista ):# Função de normalização
    lr=max(lista)-min(lista)
    lista_norm = [i/lr for i in lista]	
    return lista_norm
E=4.35974;H=10000;h=1/H;f1=0;f0=0-h;f=[];g=[];j=[];n=[];k=[];l=0;m=1;w=1;R=3.5
o=[];X=3#X é o ponto de encontro x_{match}
print("%s" %X)
for i in range(2,int(R*H)):#Solução a se evoluir pela esquerda
    r=i/H;     f.append(f1);    j.append(r)
    a=2*(1-5*h**2*((E**2-m**2)-(m*(E+m)*w**2/2)*r**2-l*(l+1)/r**2)/12)*f1
    b=(1+h*h*((E**2-m**2)-(m*(E+m)*w**2/2)*(r-h)**2-l*(l+1)/(r-h)**2)/12)*f0			
    c=1+h*h*((E**2-m**2)-(m*(E+m)*w**2/2)*(r+h)**2-l*(l+1)/(r+h)**2)/12
    x=(a-b)/c 
    if i==1+round(X*H):
        i2=i
        break
    f0=f1;    f1=x#Atualização de valores
f1=0+h;f0=0;# Restauração dos valores iniciais    
for i in range(0,int(round(R*H-X*H))):#Solução a se evoluir pela direita
    r=R-i/H;    g.append(f1);    n.append(r)
    a=2*(1-5*h**2*((E**2-m**2)-(m*(E+m)*w**2/2)*r**2-l*(l+1)/r**2)/12)*f1
    b=(1+h*h*((E**2-m**2)-(m*(E+m)*w**2/2)*(r+h)**2-l*(l+1)/(r+h)**2)/12)*f0			
    c=1+h*h*((E**2-m**2)-(m*(E+m)*w**2/2)*(r-h)**2-l*(l+1)/(r-h)**2)/12
    x=(a-b)/c;    f0=f1;    f1=x
f0=0;
#for i in range(0,i2):# Escalonamento
    #f[i-1]=f[i-1]*g[-2]/f[-2]
fig = plt.figure()# Configuração dos gráficos
ax = fig.add_subplot(1, 1, 1)
ax.spines['left'].set_position(('data', 0.0))
ax.spines['bottom'].set_position(('data', 0.0))
ax.spines['right'].set_color('none');ax.spines['top'].set_color('none')
ax.autoscale(enable=True, axis='both', tight=None)
ax.annotate('$r$', xy=(0.98, 0), ha='left', va='top', xycoords='axes fraction', fontsize=10)
plt.plot(j,f, label='$g^e(r)$',color='black')
plt.plot(n,g, label='$g^d(r)$',color='red')
plt.ylabel('$\psi(r)$',rotation='horizontal')
plt.title('$g^e(r)+g^d(r)$:  $0s_{1/2}\quad \mathcal{E}=2.18807$.')
plt.legend();plt.tight_layout();plt.show()
